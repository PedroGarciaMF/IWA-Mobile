

# Create GitHub Action Repository Variables for your version of the application:
#   FOD_BASE_URL should be FoD BASE URL for your tenant (e.g. https://emea.fortify.com)
#   FOD_API_URI should be FoD API URI for your tenant (e.g. https://api.emea,fortify.com)
#   FOD_PARENT_RELEASE_NAME is the FoD release name corresponding to the parent branch of any newly created branch, this is typically "main"
# Create GitHub Action Secrets for your version of the application:
#   FOD_CLIENT_ID should be an API Key obtained from your FoD tenant.
#   FOD_CLIENT_SECRET should be the secret for the API Key obtained for your FoD tenant.
# Helpful hints:
#   API Key credentials can be obtained from your FoD tenant, under Administration -> Settings -> API
#   It is recommended to create credentials with 'Security Lead' Role selected.
#   "Automated Audit preference" should be configured for the release's Static Scan Settings.

name: Express API CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    paths:
      - '02-express-api/**'
    branches:
      - '**'        # matches every branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      runFoDSASTScan:
        description: 'Carry out SAST scan using Fortify on Demand'
        required: false
        default: 'true'
      runFoDDASTScan:
        description: 'Carry out DAST API scan using Fortify on Demand'
        required: false
        default: 'false'

# Global environment variables
env:
  BASE_DIR: "./02-express-api"
  DEFAULT_APP_NAME: "IWA-API"
  SCANCENTRAL_VER: "23.1.0"

jobs:

  Build-And-Test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
          fetch-depth: 2
      # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}

      # Install appropriate version of Node.Js
      # and install project dependencies from npm
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install Dependencies
        working-directory: ${{ env.BASE_DIR }}
        run: npm install --only=prod

      # TODO: run unit tests

  FoD-SAST-Scan:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push') || (github.event_name == 'pull_request') || (github.event.inputs.runFoDSASTScan == 'true') }}
    needs: [ Build-And-Test ]

    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
          fetch-depth: 2
      # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}

      # Java is required to run the various Fortify utilities.
      # Setup JDK 11 on host
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Install appropriate version of Node.Js
      # and install project dependencies from npm
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install Dependencies
        working-directory: ${{ env.BASE_DIR }}
        run: npm install --only=prod

      # set the FOD_APP_NAME environment variable to be used throughout the workflow
      - name: Set FoD app name
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          if [[ -z "$APP_NAME_POSTFIX" ]]; then
            echo "::debug::Setting FOD_APP_NAME environment variable to default: '$DEFAULT_APP_NAME'"
            echo "$DEFAULT_FOD_APP_NAME" >> $GITHUB_ENV
          else
            echo "::debug::Setting FOD_APP_NAME to override: '$OVERRIDE_FOD_APP_NAME'"
            echo "$OVERRIDE_FOD_APP_NAME" >> $GITHUB_ENV
          fi
        env:
          APP_NAME_POSTFIX: ${{ vars.FOD_APP_NAME_POSTFIX }}
          DEFAULT_FOD_APP_NAME:  ${{ format('{0}={1}', 'FOD_APP_NAME', env.DEFAULT_APP_NAME) }}
          OVERRIDE_FOD_APP_NAME: ${{ format('{0}={1} {2}', 'FOD_APP_NAME', env.DEFAULT_APP_NAME, vars.FOD_APP_NAME_POSTFIX) }}
        id: set_fod_app_name

      # Get the branch name or pr number
      - name: Extract branch name
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
            PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
            BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
          else
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
          fi
          echo "::debug::branch=${BRANCH_NAME}"
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        env:
          SOURCE_BRANCH: ${{ github.head_ref }}
        id: extract_branch

      # Install Fortify tools
      - name: Setup Fortify tools
        uses: fortify/github-action/setup@v1
        with:
          export-path: true
          fcli: latest
          sc-client: 23.1.0
          fod-uploader: latest
          vuln-exporter: v2
          bugtracker-utility: skip

      # Login to Fortify on Demand fcli session
      - name: Login fcli
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          fcli --version
          fcli fod session login --url $FOD_API_URI --client-id $FOD_CLIENT_ID --client-secret $FOD_CLIENT_SECRET --session github-actions
        env:
          FOD_API_URI: ${{ vars.FOD_API_URI }}
          FOD_CLIENT_ID: ${{ secrets.FOD_CLIENT_ID }}
          FOD_CLIENT_SECRET: ${{ secrets.FOD_CLIENT_SECRET }}

      # Create FoD release for GitHub branch - if it doesn't already exist
      - name: Create FoD release
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          fcli fod release list --app "$FOD_APP_NAME" --session github-actions
          echo fcli fod release create "${FOD_APP_NAME}:${FOD_RELEASE_NAME}" --description "Created automatically from GitHub" --copy-from "${FOD_APP_NAME}:${FOD_PARENT_RELEASE_NAME}" --status Development --skip-if-exists -o expr="{releaseId}" --session github-actions
          RELID=$(fcli fod release create "${FOD_APP_NAME}:${FOD_RELEASE_NAME}" --description "Created automatically from GitHub" --copy-from "${FOD_APP_NAME}:${FOD_PARENT_RELEASE_NAME}" --status Development --skip-if-exists -o expr="{releaseId}" --session github-actions)
          echo "::debug::Created FOD_RELEASE_ID=${RELID}"
          echo "FOD_RELEASE_ID=${RELID}" >> $GITHUB_OUTPUT
        id: create_fod_release
        env:
          FOD_APP_NAME: ${{ env.FOD_APP_NAME }}
          FOD_RELEASE_NAME: ${{ steps.extract_branch.outputs.branch }}
          FOD_PARENT_RELEASE_NAME: ${{ vars.FOD_PARENT_RELEASE_NAME }}

      # For Debricked OSS scanning with FoD we need a dependencies file.
      - name: Generate dependencies file
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: npm install --package-lock-only

      # Prepare source+dependencies for upload. The default example is for a Maven project that uses pom.xml.
      # Update PACKAGE_OPTS based on the ScanCentral Client documentation for your project's included tech stack(s). Helpful hints:
      #   ScanCentral Client will download dependencies for maven (-bt mvn) and gradle (-bt gradle).
      #   ScanCentral Client can download dependencies for msbuild projects (-bt msbuild); however, you must convert the workflow to use a Windows runner.
      #   ScanCentral has additional options that should be set for PHP and Python projects
      #   For other build tools, add your build commands to download necessary dependencies and prepare according to Fortify on Demand Packaging documentation.
      #   ScanCentral Client documentation is located at https://www.microfocus.com/documentation/fortify-software-security-center/
      #- name: Download and run Fortify ScanCentral Client
      #  uses: fortify/gha-setup-scancentral-client@v2.2.2
      #  with:
      #    version: 22.2.0
      #- name: Package Code + Dependencies
      #  run: scancentral package -bt mvn -bf pom.xml -bc "clean package -DfailIfNoTests=false" -oss -o $PACKAGE_FILE
      #  env:
      #    PACKAGE_FILE: "package.zip"

      # FOR DEBUG - Save ScanCentral log file
      #- uses: actions/upload-artifact@v3
      #  if: failure()
      #  with:
      #    name: scancentral1.log
      #    path: ~/.fortify/scancentral-22.2.0/log/scancentral.log
          #    retention-days: 5

      # Since this is a React Native Javascript project we can simply Zip up source rather than use scancentral command from above
      - name: Package Code + Dependencies
        uses: TheDoctor0/zip-release@0.7.1
        with:
          directory: ./02-express-api
          type: 'zip'
          filename: 'package.zip'
          exclusions: '*.git* config logs'

      # Start Fortify on Demand SAST scan and wait until results complete. For more information on FoDUploader commands, see https://github.com/fod-dev/fod-uploader-java
      #- name: Download Fortify on Demand Universal CI Tool
      #  uses: fortify/gha-setup-fod-uploader@v1.1.3
      #- name: Perform SAST Scan
      #  run: java -jar $FOD_UPLOAD_JAR -z package.zip -aurl $FOD_API_URL -purl $FOD_URL -rid "$FOD_RELEASE_ID" -tc "$FOD_TENANT" -uc "$FOD_USER" "$FOD_PAT" $FOD_UPLOADER_OPTS -n "$FOD_UPLOADER_NOTES"
      #  env:
      #    FOD_URL: "https://emea.fortify.com/"
      #    FOD_API_URL: "https://api.emea.fortify.com/"
      #    FOD_TENANT: ${{ secrets.FOD_TENANT }}
      #    FOD_USER: ${{ secrets.FOD_USER }}
      #    FOD_PAT: ${{ secrets.FOD_PAT }}
      #    FOD_RELEASE_ID: ${{ secrets.FOD_RELEASE_ID }}
      #    FOD_UPLOADER_OPTS: "-ep 2 -pp 0 -I 1 -apf"
      #    FOD_UPLOADER_NOTES: 'Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'

      # Start Fortify on Demand SAST scan and wait until results complete.
      - name: Perform SAST scan
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          fcli fod sast-scan start --release "${FOD_RELEASE_NAME}" --notes "${FOD_SCAN_NOTES}" -f $PACKAGE_FILE --store curScan --session github-actions
          sleep 5
          fcli fod sast-scan wait-for ::curScan:: --session github-actions
        id: perform_sast_scan
        env:
          PACKAGE_FILE: "package.zip"
          FOD_RELEASE_NAME: ${{ format('{0}:{1}', env.FOD_APP_NAME, steps.extract_branch.outputs.branch) }}
          FOD_SCAN_NOTES: "Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      # Pull SAST issues from Fortify on Demand and generate GitHub-optimized SARIF output
      - name: Export Results
        uses: fortify/gha-export-vulnerabilities@v1.0.2
        with:
          fod_base_url: ${{ vars.FOD_BASE_URL }}
          fod_client_id: ${{ secrets.FOD_CLIENT_ID }}
          fod_client_secret: ${{ secrets.FOD_CLIENT_SECRET }}
          fod_release_name: ${{ format('{0}:{1}', env.FOD_APP_NAME, steps.extract_branch.outputs.branch) }}

      # Check if SARIF output file has been created
      - name: Check file existence
        id: check_files_fod
        uses: andstor/file-existence-action@v2
        with:
          files: "./03-react-native-client/gh-fortify-sast.sarif"

      # Import Fortify SAST results to GitHub Security Code Scanning
      - name: Import Results
        if: steps.check_files_fod.outputs.files_exists == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "./03-react-native-client/gh-fortify-sast.sarif"

      # Logout/Close Fortify on Demand fcli session
      - name: Logout fcli
        shell: bash
        run: |
          fcli fod session logout --session github-actions

  FoD-DAST-Scan:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push') || (github.event_name == 'pull_request') || (github.event.inputs.runFoDDASTScan == 'true') }}
    needs: [ Build-And-Test, FoD-SAST-Scan ]

    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Install appropriate version of Node.Js
      # and install project dependencies from npm
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install Dependencies
        working-directory: ${{ env.BASE_DIR }}
        run: npm install --only=prod

      # set the FOD_APP_NAME environment variable to be used throughout the workflow
      - name: Set FoD app name
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          if [[ -z "$APP_NAME_OVERRIDE" ]]; then
            echo "::debug::Setting FOD_APP_NAME environment variable to default: '$DEFAULT_APP_NAME'"
            echo "$DEFAULT_FOD_APP_NAME" >> $GITHUB_ENV
          else
            echo "::debug::Setting FOD_APP_NAME to override: '$DEFAULT_APP_NAME $APP_NAME_OVERRIDE'"
            echo "$OVERRIDE_FOD_APP_NAME" >> $GITHUB_ENV
          fi
        env:
          APP_NAME_OVERRIDE: ${{ vars.FOD_APP_NAME_POSTFIX }}
          DEFAULT_FOD_APP_NAME:  ${{ format('{0}={1}', 'FOD_APP_NAME', env.DEFAULT_APP_NAME) }}
          OVERRIDE_FOD_APP_NAME: ${{ format('{0}={1}', 'FOD_APP_NAME', env.APP_NAME_OVERRIDE) }}
        id: set_fod_app_name

      # Get the branch name or pr number
      - name: Extract branch name
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
            PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
            BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
          else
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
          fi
          echo "::debug::branch=${BRANCH_NAME}"         
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        env:
          SOURCE_BRANCH: ${{ github.head_ref }}
        id: extract_branch

      # Install Fortify Command Line (fcli) tool
      - name: Install fcli
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "::debug::PATH=$HOME/fcli/bin"         
          echo "$HOME/fcli/bin" >> $GITHUB_PATH

      # Login Fortify on Demand fcli session
      - name: Login fcli
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          fcli --version
          fcli fod session login --url $FOD_API_URI --client-id $FOD_CLIENT_ID --client-secret $FOD_CLIENT_SECRET --session github-actions
        env:
          FOD_API_URI: ${{ vars.FOD_API_URI }}
          FOD_CLIENT_ID: ${{ secrets.FOD_CLIENT_ID }}
          FOD_CLIENT_SECRET: ${{ secrets.FOD_CLIENT_SECRET }}

      # Start Fortify on Demand DAST API scan and wait until results complete.
      - name: Perform DAST API scan
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          #echo fcli fod dast-scan start-legacy --release "${FOD_RELEASE_NAME}" --entitlement-frequency Subscription --assessment-type "Dynamic API Assessment" --notes "${FOD_SCAN_NOTES}" --store curScan --session github-actions
          sleep 5
          #echo fcli fod dast-scan wait-for ::curScan:: --session github-actions
        id: perform_dast_scan
        env:
          FOD_RELEASE_NAME: ${{ format('{0}:{1}', env.FOD_APP_NAME, steps.extract_branch.outputs.branch) }}
          FOD_SCAN_NOTES: "Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      # Logout/Close Fortify on Demand fcli session
      - name: Logout fcli
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          fcli fod session logout --session github-actions

  Security-Gate:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ FoD-SAST-Scan, FoD-DAST-Scan ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # set the FOD_APP_NAME environment variable to be used throughout the workflow
      - name: Set FoD app name
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          if [[ -z "$APP_NAME_OVERRIDE" ]]; then
            echo "::debug::Setting FOD_APP_NAME environment variable to default: '$DEFAULT_APP_NAME'"
            echo "$DEFAULT_FOD_APP_NAME" >> $GITHUB_ENV
          else
            echo "::debug::Setting FOD_APP_NAME to override: '$DEFAULT_APP_NAME $APP_NAME_OVERRIDE'"
            echo "$OVERRIDE_FOD_APP_NAME" >> $GITHUB_ENV
          fi
        env:
          APP_NAME_OVERRIDE: ${{ vars.FOD_APP_NAME_POSTFIX }}
          DEFAULT_FOD_APP_NAME:  ${{ format('{0}={1}', 'FOD_APP_NAME', env.DEFAULT_APP_NAME) }}
          OVERRIDE_FOD_APP_NAME: ${{ format('{0}={1}', 'FOD_APP_NAME', env.APP_NAME_OVERRIDE) }}
        id: set_fod_app_name

      # Get the branch name or pr number
      - name: Extract branch name
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
            PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
            BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
          else
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
          fi
          echo "::debug::branch=${BRANCH_NAME}"         
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        env:
          SOURCE_BRANCH: ${{ github.head_ref }}
        id: extract_branch

      # Install Fortify Command Line (fcli) tool
      - name: Install fcli
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "::debug::PATH=$HOME/fcli/bin"          
          echo "$HOME/fcli/bin" >> $GITHUB_PATH

      # Login Fortify on Demand fcli session
      - name: Login fcli
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          fcli --version
          fcli fod session login --url $FOD_API_URI --client-id $FOD_CLIENT_ID --client-secret $FOD_CLIENT_SECRET --session github-actions
        env:
          FOD_API_URI: ${{ vars.FOD_API_URI }}
          FOD_CLIENT_ID: ${{ secrets.FOD_CLIENT_ID }}
          FOD_CLIENT_SECRET: ${{ secrets.FOD_CLIENT_SECRET }}

      # Run script to check the Security Policy of the Fortify on Demand Release to determine success/failure
      - name: Verify Security Policy
        shell: bash
        run: |
          fcli fod release get "${FOD_APP_NAME}:${FOD_RELEASE_NAME}" -o expr="Critical:\t{critical}\nHigh:\t\t{high}\nMedium:\t\t{medium}\nLow:\t\t{low}" --session github-actions
          if [ $(fcli fod release get "${FOD_APP_NAME}:${FOD_RELEASE_NAME}" -o expr="{isPassed}" --session github-actions) = 'true' ]; then echo "Security policy: passed"; else echo "Security policy: failed"; fi
        id: verify_security_policy
        env:
          FOD_APP_NAME: ${{ env.FOD_APP_NAME }}
          FOD_RELEASE_NAME: ${{ steps.extract_branch.outputs.branch }}

      # Logout/Close Fortify on Demand fcli session
      - name: Logout fcli
        working-directory: ${{ env.BASE_DIR }}
        shell: bash
        run: |
          fcli fod session logout --session github-actions
